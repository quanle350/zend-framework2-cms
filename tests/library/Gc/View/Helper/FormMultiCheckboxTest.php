<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\View\Helper;

use Zend\Form\Element;
use Gc\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:08.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class FormMultiCheckboxTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FormMultiCheckbox
     */
    protected $object;
    /**
     * @var Element\Checkbox
     */
    protected $element;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->element = new Element\MultiCheckbox('foo');
        $this->object  = new FormMultiCheckbox;
        $this->object->setTranslator(Registry::get('Application')->getServiceManager()->get('MvcTranslator'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
        unset($this->element);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testRenderOptions()
    {
        $this->element->setValueOptions(array(1, 2, 3));
        $this->element->setValue(1);
        $this->element->setAttribute('id', 'test');
        $this->element->setAttribute('class', 'input-checkbox');
        $this->object->setLabelPosition('prepend');
        $markup = $this->object->render($this->element);

        $this->assertContains('type="checkbox"', $markup);
        $this->assertContains('name="foo&#x5B;&#x5D;"', $markup);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testRenderOptionsWithEmptyClassAndNotScalarData()
    {
        $this->element->setValueOptions(
            array(
                array(
                    'selected' => true,
                    'disabled' => true,
                    'label_attributes' => array(),
                    'attributes' => array()
                )
            )
        );
        $markup = $this->object->render($this->element);

        $this->assertContains('type="checkbox"', $markup);
        $this->assertContains('name="foo&#x5B;&#x5D;"', $markup);
    }
}
