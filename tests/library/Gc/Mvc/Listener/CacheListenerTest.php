<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Mvc\Listener;

use Mockery;
use Zend\Mvc\MvcEvent;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @group    Gc
 * @category Gc_Tests
 * @package  Library
 */
class CacheListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CacheListener
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {

        $this->object = new CacheListener();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAttach()
    {
        $events = Mockery::mock('Zend\EventManager\EventManagerInterface');
        $events->shouldReceive('attach')
            ->once()
            ->with(MvcEvent::EVENT_ROUTE, array($this->object, 'onRoute'), -20);

        $events->shouldReceive('attach')
            ->once()
            ->with(MvcEvent::EVENT_FINISH, array($this->object, 'onFinish'), -100);

        $this->object->attach($events);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnRouteWithCacheActivatedAndWithOutIdentityAndData()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $cacheService = Mockery::mock('Gc\Mvc\Service\CacheService');
        $cacheService->shouldReceive('load')->once()->andReturn('N;');

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);
        $serviceLocator->shouldReceive('get')->once()->with('CacheService')->andReturn($cacheService);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);

        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(Mockery::mock('Zend\Http\PhpEnvironment\Request'));


        $this->object->onRoute($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnRouteWithCacheActivatedAndWithOutIdentityAndWithoutData()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $cacheService = Mockery::mock('Gc\Mvc\Service\CacheService');
        $cacheService->shouldReceive('load')->once()->andReturn(null);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);
        $serviceLocator->shouldReceive('get')->once()->with('CacheService')->andReturn($cacheService);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);

        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(Mockery::mock('Zend\Http\PhpEnvironment\Request'));


        $this->object->onRoute($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnRouteWithoutCache()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(false);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);

        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(Mockery::mock('Zend\Http\PhpEnvironment\Request'));


        $this->object->onRoute($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnRouteWithCacheActivatedAndWithIdentityAndPreview()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(true);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);

        $p = new \Zend\Stdlib\Parameters(
            array(
                'preview' => 'true'
            )
        );

        $request = Mockery::mock('Zend\Http\PhpEnvironment\Request');
        $request->shouldReceive('getQuery')->once()->andReturn($p);

        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn($request);


        $this->object->onRoute($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnRouteWithCacheActivatedWithoutIdentityAndWithoutHttpRequest()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);


        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(null);


        $this->object->onRoute($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnFinishWithCacheDisabled()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(false);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);


        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);

        $this->object->onFinish($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnFinishWithCacheActivatedAndNoHttpRequest()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);


        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(null);


        $this->object->onFinish($event);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testOnFinishWithCache()
    {
        $config = Mockery::mock('Gc\Core\Config');
        $config->shouldReceive('getValue')->with('cache_is_active')->once()->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $cacheService = Mockery::mock('Gc\Mvc\Service\CacheService');
        $cacheService->shouldReceive('save')->once()->andReturn();

        $serviceLocator = Mockery::mock('Zend\Mvc\MvcEvent');
        $serviceLocator->shouldReceive('get')->once()->with('CoreConfig')->andReturn($config);
        $serviceLocator->shouldReceive('get')->once()->with('Auth')->andReturn($identity);
        $serviceLocator->shouldReceive('get')->once()->with('CacheService')->andReturn($cacheService);

        $application = Mockery::Mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceLocator);

        $event = Mockery::mock('Zend\Mvc\MvcEvent');
        $event->shouldReceive('getApplication')->once()->andReturn($application);
        $event->shouldReceive('getRequest')->once()->andReturn(Mockery::mock('Zend\Http\PhpEnvironment\Request'));


        $this->object->onFinish($event);
    }
}
