<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  ZfModules
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace GcDevelopment\Form;

use Gc\DocumentType\Model as DocumentTypeModel;
use Gc\Property\Model as PropertyModel;
use Gc\Tab\Model as TabModel;
use Gc\User\Collection as UserCollection;
use Gc\User\Model as UserModel;
use Gc\View\Model as ViewModel;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-15 at 23:50:54.
 *
 * @group    ZfModules
 * @category Gc_Tests
 * @package  ZfModules
 */
class DocumentTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DocumentType
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new DocumentType;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->objet);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInit()
    {
        $collection = new UserCollection();
        foreach ($collection->getUsers() as $user) {
            $user->delete();
        }

        unset($collection);

        $userModel = UserModel::fromArray(
            array(
                'lastname' => 'Test',
                'firstname' => 'Test',
                'email' => 'pierre.rambaud86@got-cms.com',
                'login' => 'test-user-model',
                'user_acl_role_id' => 1,
            )
        );
        $userModel->setPassword('test-user-model-password');
        $userModel->save();

        $viewModel = ViewModel::fromArray(
            array(
                'name' => 'View',
                'identifier' => 'ViewIdentifier',
                'description' => 'Description',
                'content' => '',
            )
        );

        $viewModel->save();

        $documentTypeModel = DocumentTypeModel::fromArray(
            array(
                'name' => 'DocumentType',
                'description' => 'description',
                'icon_id' => 1,
                'default_view_id' => $viewModel->getId(),
                'user_id' => $userModel->getId(),
            )
        );
        $documentTypeModel->save();

        $form = new DocumentType;
        $this->assertNull($form->init());

        $viewModel->delete();
        $documentTypeModel->delete();
        $userModel->delete();
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddProperty()
    {
        $this->assertInstanceOf(
            'GcDevelopment\Form\DocumentType',
            $this->object->addProperty(
                array(
                    'name' => 'property',
                    'identifier' => 'identifier',
                    'tab' => 1,
                    'datatype' => 1,
                    'description' => 'description',
                    'is_required' => false,
                    'id' => 1,
                )
            )
        );
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddPropertyWithPropertyModel()
    {
        $propertyModel = PropertyModel::fromArray(
            array(
                'name' => 'Name',
                'description' => 'Description',
                'identifier' => 'Identifier',
                'sort_order' => 1,
                'tab_id' => 1,
                'datatype_id' => 1,
                'id' => 1
            )
        );
        $this->assertInstanceOf('GcDevelopment\Form\DocumentType', $this->object->addProperty($propertyModel));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddPropertyWithoutValidData()
    {
        $this->assertInstanceOf('GcDevelopment\Form\DocumentType', $this->object->addProperty('string'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddTab()
    {
        $this->assertInstanceOf(
            'GcDevelopment\Form\DocumentType',
            $this->object->addTab(
                array(
                    'id' => 1,
                    'name' => 'Name',
                    'description' => 'Description',
                    'sort_order' => 1,
                    'document_type_id' => 1,
                )
            )
        );
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddTabWithTabModel()
    {
        $tabModel = TabModel::fromArray(
            array(
                'id' => 1,
                'name' => 'Name',
                'description' => 'Description',
                'sort_order' => 1,
                'document_type_id' => 1,
            )
        );
        $this->assertInstanceOf('GcDevelopment\Form\DocumentType', $this->object->addTab($tabModel));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddTabWithoutValidData()
    {
        $this->assertInstanceOf('GcDevelopment\Form\DocumentType', $this->object->addTab('string'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSetValues()
    {
        $documentTypeModel = DocumentTypeModel::fromarray(
            array(
                'name' => 'Name',
                'description' => 'Description',
                'icon_id' => 1,
            )
        );

        $this->object->setValues($documentTypeModel);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSetValuesFromArray()
    {
        $this->object->setValues(
            array(
                'tabs' => array(
                    1 => array(
                        'id' => 1,
                        'name' => 'Name',
                        'description' => 'Description',
                        'sort_order' => 1,
                        'document_type_id' => 1,
                    ),
                    2 => null,
                ),
                'properties' => array(
                    1 => array(
                        'name' => 'property',
                        'identifier' => 'identifier',
                        'tab' => 1,
                        'datatype' => 1,
                        'description' => 'description',
                        'is_required' => false,
                        'id' => 1,
                    ),
                    2 => null,
                )
            )
        );
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSetValuesWithEmptyTabs()
    {
        $this->object->setValues(
            array(
                'tabs' => array()
            )
        );
    }
}
