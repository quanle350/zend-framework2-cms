<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Modules
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Social\Form;

use Mockery;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-06 at 14:00:55.
 *
 * @group Modules
 * @category Gc_Tests
 * @package  Modules
 */
class CommentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Comment
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new AddThis;

        $mock = Mockery::mock('Social\Model\AddThis');
        $mock->shouldReceive('getWidgets')->once()
            ->andReturn(
                array(
                    array(
                        'name' => 'test',
                        'identifier' => 'test',
                        'settings' => 'test',
                        'custom_string' => '',
                        'chosen_list' => '',
                    )
                )
            );
        $mock->shouldReceive('getLanguages')->once()
            ->andReturn(
                array(
                    'fr',
                    'en'
                )
            );
        $mock->shouldReceive('getConfig')->once()
            ->andReturn(
                array(
                    'profile_id'            => '',
                    'username'              => '',
                    'password'              => '',
                    'show_stats'            => true,
                    'language'              => 'en',
                    'data_ga_property_id'   => '',
                    'data_track_clickback'  => '',
                    'data_track_addressbar' => '',
                    'config_json'           => '',
                    'widgets'               => array(),
                )
            );
        $mock->shouldReceive('getDefaultStyles')->once()
            ->andReturn(
                array(
                    'large_toolbox' => array(
                        'src' => '<div class="addthis_toolbox addthis_default_style addthis_32x32_style" %1$s>'
                            . '<a class="addthis_button_facebook"></a><a class="addthis_button_twitter"></a>'
                            . '<a class="addthis_button_email"></a><a class="addthis_button_pinterest_share"></a>'
                            . '<a class="addthis_button_compact"></a><a class="addthis_counter addthis_bubble_style">'
                            . '</a></div>',
                        'img' => 'toolbox-large.png',
                        'name' => 'Large Toolbox',
                    ),
                )
            );
        $this->object->setModel($mock);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInit()
    {
        $this->assertNull($this->object->init());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testPrepareWidgets()
    {
        $this->assertNull($this->object->prepareWidgets());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testPrepareConfig()
    {
        $this->assertNull($this->object->prepareConfig());
    }
}
