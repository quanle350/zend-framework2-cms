<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Mvc\Listener;

use Gc\Document;
use Gc\DocumentType;
use Gc\User;
use Gc\Layout;
use Gc\View;
use Mockery;
use Zend\Mvc\MvcEvent;
use Zend\Validator\AbstractValidator;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @group    Gc
 * @category Gc_Tests
 * @package  Library
 */
class DocumentListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DocumentListener
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setup()
    {

        $this->object = new DocumentListener();
    }

    /**
     * tears down the fixture, for example, closes a network connection.
     * this method is called after a test is executed.
     *
     * @return void
     */
    protected function teardown()
    {
        unset($this->object);
    }

    /**
     * test
     *
     * @return void
     */
    public function testattach()
    {
        $events = Mockery::mock('Zend\EventManager\EventManagerInterface');
        $events->shouldReceive('attach')
            ->once()
            ->with(MvcEvent::EVENT_ROUTE, array($this->object, 'onRoute'), -10);

        $this->object->attach($events);
    }

    /**
     * test
     *
     * @return void
     */
    public function testOnRouteWithWrongRoute()
    {
        $route = Mockery::mock('Zend\Mvc\Router\Http\RouteMatch');
        $route->shouldReceive('getMatchedRouteName')->once()->andReturn('admin');

        $events = Mockery::mock('Zend\EventManager\EventInterface');
        $events->shouldReceive('getRouteMatch')
            ->once()
            ->andReturn($route);


        $this->assertNull($this->object->onRoute($events));
    }

    /**
     * test
     *
     * @return void
     */
    public function testOnRouteWithEmptyPath()
    {
        $route = Mockery::mock('Zend\Mvc\Router\Http\RouteMatch');
        $route->shouldReceive('getMatchedRouteName')->once()->andReturn('cms');
        $route->shouldReceive('getParam')->with('path')->once()->andReturn('');

        $events = Mockery::mock('Zend\EventManager\EventInterface');
        $events->shouldReceive('getRouteMatch')
            ->once()
            ->andReturn($route);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceManager = Mockery::mock('Zend\ServiceManager\ServiceManager');
        $serviceManager->shouldReceive('get')->with('Auth')->andReturn($identity);
        $serviceManager->shouldReceive('setService')->with('CurrentDocument', false)->once();

        $application = Mockery::mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceManager);

        $events->shouldReceive('getApplication')->once()->andReturn($application);

        $this->assertNull($this->object->onRoute($events));
    }

    /**
     * test
     *
     * @return void
     */
    public function testOnRouteWith404Path()
    {
        $route = Mockery::mock('Zend\Mvc\Router\Http\RouteMatch');
        $route->shouldReceive('getMatchedRouteName')->once()->andReturn('cms');
        $route->shouldReceive('getParam')->with('path')->once()->andReturn('/this/is/a/path');

        $events = Mockery::mock('Zend\EventManager\EventInterface');
        $events->shouldReceive('getRouteMatch')
            ->once()
            ->andReturn($route);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceManager = Mockery::mock('Zend\ServiceManager\ServiceManager');
        $serviceManager->shouldReceive('get')->with('Auth')->andReturn($identity);
        $serviceManager->shouldReceive('setService')->with('CurrentDocument', false)->once();

        $application = Mockery::mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceManager);

        $events->shouldReceive('getApplication')->once()->andReturn($application);

        $this->assertNull($this->object->onRoute($events));
    }

    /**
     * test
     *
     * @return void
     */
    public function testOnRouteWithRealPath()
    {
        $this->createDocuments();

        $route = Mockery::mock('Zend\Mvc\Router\Http\RouteMatch');
        $route->shouldReceive('getMatchedRouteName')->once()->andReturn('cms');
        $route->shouldReceive('getParam')->with('path')->once()->andReturn('/parent/children/');

        $events = Mockery::mock('Zend\EventManager\EventInterface');
        $events->shouldReceive('getRouteMatch')
            ->once()
            ->andReturn($route);


        $translator = Mockery::mock('Zend\Mvc\I18n\Translator');
        $translator->shouldReceive('setLocale')->andReturn(true);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceManager = Mockery::mock('Zend\ServiceManager\ServiceManager');
        $serviceManager->shouldReceive('get')->with('Auth')->andReturn($identity);
        $serviceManager->shouldReceive('get')->with('MvcTranslator')->andReturn($translator);
        $serviceManager->shouldReceive('setService')->with('CurrentDocument', Mockery::any())->once();

        $application = Mockery::mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceManager);

        $events->shouldReceive('getApplication')->once()->andReturn($application);

        $this->assertNull($this->object->onRoute($events));
        AbstractValidator::setDefaultTranslator(null);

        $this->deleteDocuments();
    }

    /**
     * test
     *
     * @return void
     */
    public function testOnRouteWithHomePage()
    {
        $this->createDocuments();

        $route = Mockery::mock('Zend\Mvc\Router\Http\RouteMatch');
        $route->shouldReceive('getMatchedRouteName')->once()->andReturn('cms');
        $route->shouldReceive('getParam')->with('path')->once()->andReturn('/children/');

        $events = Mockery::mock('Zend\EventManager\EventInterface');
        $events->shouldReceive('getRouteMatch')
            ->once()
            ->andReturn($route);

        $identity = Mockery::mock('Zend\Authentication\AuthenticationService');
        $identity->shouldReceive('hasIdentity')->andReturn(false);

        $serviceManager = Mockery::mock('Zend\ServiceManager\ServiceManager');
        $serviceManager->shouldReceive('get')->with('Auth')->andReturn($identity);
        $serviceManager->shouldReceive('setService')->with('CurrentDocument', Mockery::any())->once();

        $application = Mockery::mock('Zend\Mvc\Application');
        $application->shouldReceive('getServiceManager')->once()->andReturn($serviceManager);

        $events->shouldReceive('getApplication')->once()->andReturn($application);

        $this->assertNull($this->object->onRoute($events));

        $this->deleteDocuments();
    }


    /**
     * test
     *
     * @return void
     */
    protected function createDocuments()
    {
        $this->view = View\Model::fromArray(
            array(
                'name' => 'View Name',
                'identifier' => 'View identifier',
                'description' => 'View Description',
                'content' => 'View Content'
            )
        );
        $this->view->save();

        $this->layout = Layout\Model::fromArray(
            array(
                'name' => 'Layout Name',
                'identifier' => 'Layout identifier',
                'description' => 'Layout Description',
                'content' => 'Layout Content'
            )
        );
        $this->layout->save();

        $this->user = User\Model::fromArray(
            array(
                'lastname' => 'User test',
                'firstname' => 'User test',
                'email' => 'pierre.rambaud86@gmail.com',
                'login' => 'test',
                'user_acl_role_id' => 1,
            )
        );

        $this->user->setPassword('test');
        $this->user->save();

        $this->documentType = DocumentType\Model::fromArray(
            array(
                'name' => 'Document Type Name',
                'description' => 'Document Type description',
                'icon_id' => 1,
                'defaultview_id' => $this->view->getId(),
                'user_id' => $this->user->getId(),
            )
        );

        $this->documentType->save();

        $this->homeDocument = Document\Model::fromArray(
            array(
                'name' => 'Document name',
                'url_key' => '',
                'status' => Document\Model::STATUS_ENABLE,
                'show_in_nav' => true,
                'user_id' => $this->user->getId(),
                'document_type_id' => $this->documentType->getId(),
                'view_id' => $this->view->getId(),
                'layout_id' => $this->layout->getId(),
                'parent_id' => 0
            )
        );
        $this->homeDocument->save();

        $this->parentDocument = Document\Model::fromArray(
            array(
                'name' => 'Document name',
                'url_key' => 'parent',
                'status' => Document\Model::STATUS_ENABLE,
                'show_in_nav' => true,
                'user_id' => $this->user->getId(),
                'document_type_id' => $this->documentType->getId(),
                'view_id' => $this->view->getId(),
                'layout_id' => $this->layout->getId(),
                'parent_id' => 0
            )
        );
        $this->parentDocument->save();

        $this->document = Document\Model::fromArray(
            array(
                'name' => 'Document name',
                'url_key' => 'children',
                'status' => Document\Model::STATUS_ENABLE,
                'show_in_nav' => true,
                'user_id' => $this->user->getId(),
                'document_type_id' => $this->documentType->getId(),
                'view_id' => $this->view->getId(),
                'layout_id' => $this->layout->getId(),
                'parent_id' => $this->parentDocument->getId()
            )
        );

        $this->document->save();
    }

    protected function deleteDocuments()
    {
        $this->document->delete();
        unset($this->document);

        $this->homeDocument->delete();
        unset($this->homeDocument);

        $this->parentDocument->delete();
        unset($this->parentDocument);

        $this->view->delete();
        unset($this->view);

        $this->layout->delete();
        unset($this->layout);

        $this->documentType->delete();
        unset($this->documentType);

        $this->user->delete();
        unset($this->user);
    }
}
