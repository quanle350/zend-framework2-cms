<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Modules
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace ActivityLog\Model\Event;

use ActivityLog\Module;
use Gc\User\Model as UserModel;
use Gc\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-06 at 13:53:49.
 *
 * @group Modules
 * @category Gc_Tests
 * @package  Modules
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Comment
     */
    protected $object;

    /**
     * @var Module
     */
    protected $boostrap;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->boostrap = new Module();
        $this->boostrap->install();
        $this->object = new Model;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        $this->boostrap->uninstall();
        unset($this->boostrap);
        unset($this->object);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testFromArray()
    {
        $this->assertInstanceOf('ActivityLog\Model\Event\Model', $this->object->fromArray(array()));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testFromFakeId()
    {
        $this->assertFalse($this->object->fromId(1));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetUser()
    {
        $user = UserModel::fromArray(
            array(
                'lastname' => 'User test',
                'firstname' => 'User test',
                'email' => 'pierre.rambaud86@gmail.com',
                'login' => 'test',
                'user_acl_role_id' => 1,
            )
        );

        $user->setPassword('test');
        $user->save();
        $this->object->setUserId($user->getId());

        $this->assertInstanceOf('Gc\User\Model', $this->object->getUser());
        $user->delete();
        unset($user);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testDeleteWithoutId()
    {
        $this->assertFalse($this->object->delete());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testDeleteWithWrongValues()
    {
        $configuration = Registry::get('Application')->getConfig();
        if ($configuration['db']['driver'] == 'pdo_mysql') {
            $this->markTestSkipped('Mysql does not thrown exception.');
        }

        $this->setExpectedException('Gc\Exception');
        $this->object->setId('undefined');
        $this->assertFalse($this->object->delete());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testFromId()
    {
        $this->object->setContent('test');
        $this->object->setTemplateId(1);
        $this->object->save();
        $this->assertInstanceOf('ActivityLog\Model\Event\Model', $this->object->fromId(1));
        $this->object->delete();
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSave()
    {
        $this->object->setContent('test');
        $this->object->setTemplateId(1);
        $this->assertInternalType('integer', $this->object->save());
        $this->object->delete();
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSaveWithInvalidDataShouldReturnException()
    {
        $this->setExpectedException('Gc\Exception');
        $this->object->setContent('test');
        $this->object->setTemplateId('40');
        $this->assertNull($this->object->save());
        $this->object->delete();
    }

    /**
     * Test
     *
     * @return void
     */
    public function testSaveWithIdShouldReturnTrue()
    {
        $this->object->setContent('test');
        $this->object->setTemplateId(1);
        $this->object->save();
        $this->assertTrue($this->object->save());
        $this->object->delete();
    }
}
